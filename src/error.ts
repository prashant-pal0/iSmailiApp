import {
  BadRequestException,
  ForbiddenException,
  HttpException,
  HttpStatus,
  InternalServerErrorException,
  NotAcceptableException,
  NotFoundException,
  UnauthorizedException,
} from '@nestjs/common'


const commonText = `Error:`
export const errors = {
  //COMMON
  AccessNotAllowed: new BadRequestException(`${commonText} Access not allowed for this API.`),
  TryAgain: new BadRequestException(`${commonText} Please try again after some time.`),
  InvalidPrice: new BadRequestException(`${commonText} Enter valid price`),
  ExpiryTime: new BadRequestException(`${commonText} Expiry time should be greater than current datetime.`),
  InvalidAmount: new BadRequestException(`${commonText} Invalid Amount`),
  InvalidId: new InternalServerErrorException(`${commonText} Invalid Id.`),
  ReferenceIdNotFound: new BadRequestException(`${commonText} Reference id does not exist`),
  InvalidStartEndTime: new BadRequestException(`${commonText} Start time should always be less than the End time.`),
  ServerError: new InternalServerErrorException(`${commonText} Server error. Please try again later`),
  ProcessingError: new BadRequestException(`${commonText} Error in processing. Please try again later`),

  //CARD
  InvalidCard: new BadRequestException(`${commonText} This action can not perform on this card.`),
  InvalidCards: new BadRequestException(`${commonText} Invalid submitted cards. The cards should belong to allowedTemplateIds`),
  CardOwnerDifferent: new BadRequestException(`${commonText} Card does not belong to you`),
  CardNotFound: new NotFoundException(`${commonText} Card not found`),
  CardLocked: new BadRequestException(`${commonText} Card is locked`),
  OtherDataNotFound: new NotFoundException(
    `${commonText} The card does not yet have metadata initialised from blockchain. Either call reload or please try again later`
  ),
  CardNotDeposited: new BadRequestException(`${commonText} Asset not yet deposited`),
  NoUnpackSchema: new BadRequestException(`${commonText} Unpack for this card is not allowed.`),
  NotEnoughCardsInYourVault: new BadRequestException(`${commonText} You don't have enough cards.`),
  NotEnoughCardsInUserVault: new BadRequestException(`${commonText} User doesn't have enough cards.`),
  MetadataUpdateNotAllowed: new BadRequestException(`${commonText} Update of metadata is not allowed`),
  RewardCardsMissing: new BadRequestException(`${commonText} Reward cards are missing`),
  RewardAttributesMissing: new BadRequestException(`${commonText} Reward attribute is missing`),
  MintLimitError: new BadRequestException(`${commonText} You can't mint this much card at once`),
  OnChainCollectionNotFound: new BadRequestException(`${commonText} on-chain collection not found`),
  InvalidCollectionName: new BadRequestException(`${commonText} collection name is invalid`),
  InvalidSchemaName: new BadRequestException(`${commonText} schema name is invalid`),
  AllowedOnlyForInternal: new BadRequestException(`${commonText} this feature is only allowed for internal schema/collection`),
  CardSchemaLocked: new BadRequestException(
    `${commonText} Any action which involves ownership transfer cannot be performed on this card. Schema of this card is in locked state.`
  ),
  InvalidReceiver: new BadRequestException(`${commonText} Invalid receiver address.`),
  CardWithdrawError: new BadRequestException(`${commonText} All cards should belong to same blockchain.`),
  CannotUpdateAttribute: new BadRequestException(`${commonText} Admin cannot update this attribute.`),
  CardToBurnNotFound: new BadRequestException(`${commonText} The card to be burnt cannot be found.`),
  OnDemandUnpackNotAvailable: new BadRequestException(`${commonText} On demand unpacking is not available at this moment.`),
  DuplicateCard: new BadRequestException(`${commonText} Duplicate cards are not allowed in submittedCards.`),
  PackWithTemplateIdAlreadyExists: new BadRequestException(`${commonText} Pack with this template ID already exists.`),
  PackNotFound: new BadRequestException(`${commonText} Pack not found`),
  CountUnpackAlreadyDone: new BadRequestException(`${commonText} Already unpacked more than the count.`),
  SchemaOrTemplateRequired: new BadRequestException(`${commonText} Either schemaId or templates data is required.`),
  InvalidStartTime: new BadRequestException(`${commonText} Start time can not be less than current time.`),
  InvalidTemplateId: new BadRequestException(`${commonText} Invalid template id provided.`),

  // Creator Portal
  SchemaNotFound: new NotFoundException(`${commonText} Schema not found`),
  SchemaNotCreated: new NotFoundException(`${commonText} Schema not yet created`),
  SchemaNameNotFound: new NotFoundException(`${commonText} Schema name not found in request`),
  InvalidAttributesKeys: new NotFoundException(`${commonText} Keys of the immutable and mutable objects cannot contain spaces.`),
  SchemaAlreadyExist: new BadRequestException(`${commonText} Schema already exist`),
  TemplateAlreadyExist: new BadRequestException(`${commonText} Template already exists`),
  TemplateNotFound: new NotFoundException(`${commonText} Template not found`),
  TemplateNotAllowed: new BadRequestException(`${commonText} Template of external schema is not allowed`),
  AttributeNotFound: new NotFoundException(`${commonText} Attribute not found`),
  ImmutableAllowed: new NotFoundException(`${commonText} only immutable data is allowed in visible array`),
  MutableAllowed: new NotFoundException(`${commonText} only mutable data is allowed in sort array`),
  OnlyImmutableAllowed: new NotFoundException(`${commonText} Only immutable are allowed`),
  CollectionAlreadyExist: new BadRequestException(`${commonText} Collection already exist`),
  CollectionNotFound: new NotFoundException(`${commonText} Collection not found`),
  CollectionIdRequired: new BadRequestException(`${commonText} CollectionId is required`),
  ReceiverNotFound: new NotFoundException(`${commonText} Receiver account not exists in request`),
  SchemaLoyaltyAlreadyExists: new BadRequestException(`${commonText} A schema for loyalty cards already exist for this collection.`),
  SchemaInvalidAttributes: new BadRequestException(`${commonText} Schema required attributes are not present.`),
  SchemaInvalidDataTypes: new BadRequestException(`${commonText} Schema required data types are not present.`),
  InvalidImmutableData: new BadRequestException(`${commonText} Invalid immutable data present.`),
  InvalidMutableData: new BadRequestException(`${commonText} Invalid mutable data present.`),
  NoMutableFields: new BadRequestException(`${commonText} Mutable fields not present.`),
  SchemaStandardRequired: new BadRequestException(`${commonText} Schema standard required if schema name not present`),
  TemplateNotUnique: new BadRequestException(`${commonText} Template ID should be unique for each tier`),
  TierNotFound: new BadRequestException(`${commonText} No tier found for this id`),
  TierWithLevelAlreadyExists: new BadRequestException(`${commonText} Tier with this level already exists.`),
  SchemaNotLoyalty: new BadRequestException(`${commonText} Only loyalty type schema is allowed.`),
  SchemaNotUpgradeable: new BadRequestException(
    `${commonText} This loyalty schema doesn't support tier upgrade. Invalid eligibility criteria.`
  ),
  InvalidType: new BadRequestException(`${commonText} Invalid type passed for keys.`),
  NotAllowedForOtherImages: new BadRequestException(`${commonText} This operation is only allowed for s3 images.`),
  LoyaltySchemaInvalidForERC1155: new BadRequestException(`${commonText} ERC1155 standard schemas cannot be the Loyalty type schemas.`),

  //USER
  UserNotFound: new NotFoundException(`${commonText} User not found`),
  UserAlreadyRegistered: new NotFoundException(`${commonText} User already registered`),
  EmailNotFound: new NotFoundException(`${commonText} Email not found`),
  PhoneNotFound: new NotFoundException(`${commonText} Phone not found`),
  PhoneNotAllowed: new BadRequestException(`${commonText} login with phone number is not allowed`),
  InvalidEmail: new BadRequestException(`${commonText} Invalid email`),
  InvalidPhone: new BadRequestException(`${commonText} Invalid phone number`),
  OTPWaitingPeriodOngoing: new BadRequestException(),
  // `${commonText} New OTP can be requested only after ${Constants.OTPWaitingPeriod} seconds`
  InvalidVerificationCode: new BadRequestException(`${commonText} Verification code is invalid/expired`),
  InvalidLoginType: new NotAcceptableException(`${commonText} Invalid login type`),
  InvalidAccessToken: new BadRequestException(`${commonText} Invalid access token`),
  UnAuthorizedOperator: new UnauthorizedException(`${commonText} Unauthorized operator`),
  EmailAlreadyExists: new BadRequestException(`${commonText} Email already exists, please try another`),
  AccessDenied: new BadRequestException(`${commonText} Access Denied`),
  BankDetailsExist: new BadRequestException(`${commonText} This bank details already exists. Please try with a new one`),
  AuthorizationTokenRequired: new UnauthorizedException(`${commonText} Token not found`),
  MultipleSuperAdmin: new BadRequestException(`${commonText} Multiple Super Admins found`),
  ApiKeyRequired: new UnauthorizedException(`${commonText} API Key not found`),
  BankDetailsNotFound: new BadRequestException(`${commonText} Bank details not found`),
  Logout: new HttpException(`${commonText} Session Expired! Please login again.`, HttpStatus.FORBIDDEN),
  InvalidExternalAPIResponse: new BadRequestException(`${commonText} Not able to login user. Invalid email.`),

  //MARKETPLACE
  OfferDisabled: new BadRequestException(`${commonText} Offer disabled for this card`),
  CardAlreadyListed: new BadRequestException(`${commonText} Card already listed`),
  AlreadyOffered: new BadRequestException(`${commonText} You have already offered on this card.`),
  NoSpecialOfferFound: new NotFoundException(`${commonText} No special offer found`),
  SameBuyerSeller: new BadRequestException(`${commonText} Buyer and seller can't be the same`),
  OfferNotFound: new NotFoundException(`${commonText} Offer not found.`),
  SellerChanged: new BadRequestException(`${commonText} card does not belongs to the seller who listed it`),
  NotListed: new BadRequestException(`${commonText} Asset is not listed anymore.`),
  OfferPriceAuction: new BadRequestException(`${commonText} For auction listing, price should be greater than listed price.`),
  AuctionExpired: new BadRequestException(`${commonText} Auction Expired`),
  OfferPriceFixed: new BadRequestException(`${commonText} Offered price should be lower than the listed price.`),
  CannotAcceptOffer: new BadRequestException(`${commonText} You cannot accept this offer.`),
  CannotRejectOffer: new BadRequestException(`${commonText} You cannot reject this offer.`),
  CannotRemoveOffer: new BadRequestException(`${commonText} You cannot remove this offer.`),
  CannotOfferOwnCard: new BadRequestException(`${commonText} You can't make an offer on your own card.`),
  NotCardOwner: new BadRequestException(`${commonText} Only card owner can make a counter offer.`),
  CounterOfferAlreadyExists: new BadRequestException(`${commonText} A counter offer already exists. Please remove and then add new one`),
  CardNotAvailableForOffers: new UnauthorizedException(`${commonText} card not available`),
  UnpackNotAllowed: new BadRequestException(`${commonText} unpack not allowed`),
  CounterPriceError: new BadRequestException(`${commonText} Counter price should be more than the offer price`),
  UnpackLimitReached: new BadRequestException(`${commonText} Maximum limit for unpack exceeded.`),
  UnpackNotStarted: new BadRequestException(`${commonText} Unpack not started yet.`),
  UnpackAlreadyStarted: new BadRequestException(`${commonText} Unpack already started.`),

  //WALLET
  LowBalance: new BadRequestException(`${commonText} You do not have enough balance`),
  InvalidPaymentFor: new BadRequestException(`${commonText} Invalid payment for`),
  InvalidPaymentMethod: new BadRequestException(`${commonText} Invalid payment method`),
  PaymentNotComplete: new BadRequestException(`${commonText} Payment not yet completed`),
  AmountMismatch: new BadRequestException(`${commonText} Amount mismatch`),
  PaymentPending: new BadRequestException(`${commonText} Payment Failed/Pending`),
  InvalidBalance: new BadRequestException(`${commonText} Invalid balance, Please contact Admin`),
  UnsupportedGateway: new BadRequestException(`${commonText} Unsupported payment gateway`),
  PayoutIdNotFound: new BadRequestException(`${commonText} Id not found/status is not pending anymore`),
  OnlyAllowedToCancel: new BadRequestException(`${commonText} user is only allowed to cancel`),
  AdminStatusNotAllowed: new BadRequestException(`${commonText} admin is only allowed to update cancel or success status`),
  PayoutDetailsNotAdded: new BadRequestException(`${commonText} Payout Details not found`),
  PaymentGatewayNotEnabled: new BadRequestException(`${commonText} This payment gateway is not enabled.`),
  PaymentAlreadyCompleted: new BadRequestException(`${commonText} Payment already completed.`),
  InvalidInternalPaymentMethod: new BadRequestException(`${commonText} This payment method not enabled for this operator.`),
  InvalidReferenceID: new BadRequestException(`${commonText} Invalid reference ID.`),

  //PRIMARY-SALE
  PrimarySaleActive: new BadRequestException(`${commonText} Primary sale already active.`),
  PrimarySaleNotStarted: new BadRequestException(`${commonText} Primary sale not started yet`),
  PrimarySaleNotActive: new BadRequestException(`${commonText} No active primary sale for this template`),
  PrimarySaleEnded: new BadRequestException(`${commonText} Primary sale has ended`),
  QueueTypeNotSupported: new BadRequestException(`${commonText} This Queue type not supported for update primary sale`),
  BuyLimitReached: new BadRequestException(`${commonText} You have reached your maximum buy limit for this drop.`),
  MaximumAlreadySold: new BadRequestException(`${commonText} Maximum amount has already been sold.`),
  NoMoreCardAvailable: new BadRequestException(`${commonText} Card not available,Try again later`),
  PrimarySaleNotFound: new BadRequestException(`${commonText} Primary Sale not found`),
  OnDemandNotEnabled: new BadRequestException(`${commonText} On demand not available for this blockchain`),
  AllSlotsInitialized: new BadRequestException(`${commonText} All slots of this primary sale have been already initialised.`),
  SlotNotFound: new BadRequestException(`${commonText} Slot not found`),
  SlotAlreadyEnded: new BadRequestException(`${commonText} Slot already ended`),
  RegistrationNotNeeded: new BadRequestException(`${commonText} Registration not needed.`),
  UserNotRegistered: new BadRequestException(`${commonText} Register for the sale first.`),
  SaleRegistrationsNotStarted: new BadRequestException(`${commonText} Sale registration not yet started.`),
  SaleRegistrationsClosed: new BadRequestException(`${commonText} Sale registrations ended.`),
  SlotsNotInitialized: new BadRequestException(`${commonText} Sale not configured completely yet(Slots Missing). Please wait`),
  NotEligibleToBuy: new BadRequestException(`${commonText} Sorry you're not eligible to buy at this moment`),
  NotEligibleToBuyLoyaltyCard: new BadRequestException(`${commonText} You already own a loyalty card in your vault from this collection`),
  NotEligibleToSale: new BadRequestException(`${commonText} Sale cannot be created with this template at this moment `),
  QueueFinalizationTimeWrong: new BadRequestException(`${commonText} Queue finalization time missing.`),
  InvalidQueueFinalizationTime: new BadRequestException(
    `${commonText} Queue finalization time should be greater than the Registration start time`
  ),
  StartTimeLessThanQueueFinalization: new BadRequestException(
    `${commonText} Primary Sale start time should be greater than queue initialization  time`
  ),
  NotAllowedSchemaLocked: new BadRequestException(`${commonText} Enable drops is not allowed. Schema is locked.`),
  RegistrationTimeAlreadyStarted: new BadRequestException(
    `${commonText} This updation cannot be done after the registration time has started`
  ),
  RegistrationTimeAlreadyEnded: new BadRequestException(`${commonText} This updation cannot be done after the registration time has ended`),

  InvalidLimitPerUser: new BadRequestException(`${commonText}  Invalid limit per user for Loyalty Card. limitPerUser should be 1.`),
  MaxIssueChangeNotAllowed: new BadRequestException(`${commonText} Change of maxIssue is not allowed for On Demand sale.`),
  AlreadySoldMoreThanMaxIssue: new BadRequestException(`${commonText} Primary sale has already sold more than maxIssue.`),

  //BLOCKCHAIN
  MetadataBlockchainUpdation: new BadRequestException(`${commonText} Unable to update metadata on blockchain.`),
  BlockchainError: new BadRequestException(`${commonText} Transaction Failed, Blockchain error`),
  EthereumWithdrawLimitError: new BadRequestException(`${commonText} Only one ethereum card withdraw is allowed in one transaction`),
  AddressAlreadyExists: new BadRequestException(`${commonText} wallet address already exists`),
  AddressNotFound: new UnauthorizedException(`${commonText} wallet address not found`),
  AddressDoesNotMatch: new UnauthorizedException(`${commonText} wallet address does not match the signature`),
  InvalidBlockchain: new UnauthorizedException(`${commonText} Invalid blockchain`),
  BlockchainAlreadyExists: new BadRequestException(`${commonText} blockchain name already exists`),
  OnChainAddressNotFound: new BadRequestException(`${commonText} wallet Address not found`),
  SignedTransactionNotFound: new BadRequestException(`${commonText} eos sign transaction not found`),
  TransactionDetailsNotFetched: new BadRequestException(`${commonText} Unable to fetch transaction details`),

  //OPERATOR
  InvalidOperatorId: new NotAcceptableException(`${commonText} Invalid Operator Id`),
  TreasurerEmailNotFound: new NotFoundException(`${commonText} Treasurer Email not found`),
  CustodialAddressNotAvailable: new BadRequestException(`${commonText} Custodial Address for operator is not available`),
  ApiKeyNotFound: new BadRequestException(`${commonText} Invalid API Key. Please try again`),
  InvalidCredentials: new BadRequestException(`${commonText} Invalid credentials`),
  ConfigurationNotFound: new BadRequestException(`${commonText} Invalid Id, configuration not found.`),
  CurrencyAlreadyExists: new BadRequestException(`${commonText} Currency Already exists.`),
  InvalidOperatorUrl: new BadRequestException(`${commonText} Invalid Operator user login url.`),
  FacebookLoginUnavailable: new BadRequestException(`${commonText} Facebook login not available.`),
  GmailLoginUnavailable: new BadRequestException(`${commonText} Gmail login not available.`),

  //PAYMENT-GATEWAY
  ReferenceIdAlreadyExists: new BadRequestException(`${commonText} Reference id already exists`),
  CurrencyNotAvailable: new BadRequestException(`${commonText} This currency is not available right now`),

  //THIRD-PARTY
  MatchNotFound: new BadRequestException(`${commonText} Match not found`),
  UserNotWhitelisted: new BadRequestException(`${commonText} This sale is only for limited users.`),
  CardAlreadySubmitted: new BadRequestException(`${commonText} card already submitted for this challenge`),
  PerformKycVerification: new ForbiddenException(`${commonText} Please perform KYC Verification to access.`),
  CompleteKycVerification: new ForbiddenException(`${commonText} Please complete your KYC verification`),
  FaceMatchAlreadyDone: new BadRequestException(`${commonText} Face match already done.`),
  FaceDoNotMatch: new BadRequestException(`${commonText} Face do not match to Aadhaar card or PAN card`),
  AadharNotVerified: new BadRequestException(`${commonText} Your Aadhaar is not verified. Please verify and then try again.`),

  //REWARD PROGRAMS
  FantasySeriesNotFound: new BadRequestException(`${commonText} fantasy series not found.`),
  FantasyGameNotFound: new BadRequestException(`${commonText} fantasy game not found.`),
  FantasyGameNotStarted: new BadRequestException(`${commonText} fantasy game not yet started.`),
  FantasyGameOver: new BadRequestException(`${commonText} fantasy game over.`),
  InvalidNumberOfSubmission: new BadRequestException(`${commonText} Number of cards sent is incorrect.`),
  InvalidCardTemplateRelation: new BadRequestException(`${commonText} Card does not belongs to given template.`),
  InvalidSubmissionId: new BadRequestException(`${commonText} invalid submission id.`),
  FantasyGameNotYetOver: new BadRequestException(`${commonText} fantasy game not yet over.`),
  WinnerAlreadyDeclared: new BadRequestException(`${commonText} winner already declared.`),
  FantasyGameStarted: new BadRequestException(`${commonText} Card submission/removal is not allowed, as game already started.`),
  TeamNameAlreadyExist: new BadRequestException(`${commonText} team name already exists.`),
  AllGamesAlreadyScheduled: new BadRequestException(`${commonText} all games already scheduled.`),
  WheelNotFound: new BadRequestException(`${commonText} Invalid Wheel ID. Wheel details not found.`),
  WheelExpired: new BadRequestException(`${commonText} Wheel has expired.`),
  WheelNotActive: new BadRequestException(`${commonText} Wheel is not active yet.`),
  NotEligibleForWheel: new BadRequestException(`${commonText} You cannot spin wheel at this time.`),
  InvalidChallengeTime: new BadRequestException(`${commonText} Challenge timings should be greater than the current time.`),
  InvalidResultDeclarationTime: new BadRequestException(
    `${commonText} Result declaration time should be greater or equal to the end time and smaller or equal to the disappearing time.`
  ),
  InvalidDisappearingTime: new BadRequestException(`${commonText} Disappearing time should be greater or equal to the end time.`),
  ChallengeAlreadyStarted: new BadRequestException(`${commonText} Challenge has started and this updation cannot be done now`),
  ChallengeAlreadyEnded: new BadRequestException(`${commonText} Challenge has ended and this updation cannot be done now`),
  ChallengeSubmissionTimeAlreadyStarted: new BadRequestException(
    `${commonText} Challenge submission time has started and this updation cannot be done now`
  ),
  SubmissionsNotStarted: new BadRequestException(`${commonText} Submissions not yet started.`),
  UpgradeChallengeAlreadyExists: new BadRequestException(`${commonText} An upgrade utility challenge is already active.`),
  NoActiveUpgradeChallenge: new BadRequestException(`${commonText} No active upgrade challenge for this card.`),
  AttributeValueNotEnough: new BadRequestException(`${commonText} Card attribute value is less than allowed attribute values.`),
  InvalidAttributeProvided: new BadRequestException(`${commonText} Invalid attributes provided.`),
  InvalidSchemaAttributeProvided: new BadRequestException(`${commonText} Invalid attribute sent for the schema.`),
  InvalidSubmissionStartTime: new BadRequestException(`${commonText} Submissions start time should be less than end time`),
  PredictionChallengeNotFound: new BadRequestException(`${commonText} Prediction challenge not found.`),
  ChallengeNotActive: new BadRequestException(`${commonText} Challenge is not active.`),
  ChallengeAlreadyParticipated: new BadRequestException(`${commonText} You have already participated in this challenge.`),
  ResultDeclarationAlreadyPassed: new BadRequestException(`${commonText} Result declaration time has already passed to make submission.`),
  CardNotAllowedForChallenge: new BadRequestException(`${commonText} This card is not allowed for the challenge.`),
  CardNotMeetingEligibility: new BadRequestException(
    `${commonText} This card does not hold eligibility criteria to participate in this challenge.`
  ),
  InvalidChallengeAnswers: new BadRequestException(`${commonText} Invalid answer for the challenge.`),
  MandatoryCardIdMissing: new BadRequestException(`${commonText} CardId is a mandatory field for this wheel.`),
  CardIdSchemaMismatch: new BadRequestException(`${commonText} The card doesn't belong to the schema related to this.`),
  CardIdCollectionMismatch: new BadRequestException(`${commonText} The card doesn't belong to the collection provided.`),
  InvalidSchemaId: new BadRequestException(`${commonText} Invalid Schema Id provided.`),
  JourneyNotFound: new BadRequestException(`${commonText} No journey found.`),
  JourneyNameNotUnique: new BadRequestException(`${commonText} Journey name not unique for this operator.`),
  AllJourneyChallengesAdded: new BadRequestException(`${commonText} all journey challenges already added.`),
  JourneyChallengeAlreadyCompleted: new BadRequestException(`${commonText} Journey challenge is already completed.`),
  JourneyChallengeAlreadyExist: new BadRequestException(`${commonText} Journey challenge with similar configuration already exists.`),
  NoJourneyChallengeFound: new BadRequestException(`${commonText} No journey challenge found.`),
  ChallengeInvalidStartTime: new BadRequestException(`${commonText} Challenge start time is beyond journey end time.`),
  JourneyChallengeNotExternal: new BadRequestException(`${commonText} Reference id cannot be updated for internal challenges.`),
  ChallengeJourneyEndTimeMismatch: new BadRequestException(`${commonText} Challenge has ended and this updation cannot be done now`),
  MinCorrectAnswer: new BadRequestException(`${commonText} Minimum correct answer cannot be greater than the number of questions.`),
  TriviaChallengeNotFound: new BadRequestException(`${commonText} Trivia challenge not found.`),
  IncorrectQuestionAnswerLength: new BadRequestException(`${commonText} Answers and questions length should match.`),
  InvalidRewardTemplate: new BadRequestException(`${commonText} Reward template should belong to given collection.`),
  InvalidRewardTemplates: new BadRequestException(
    `${commonText} Invalid template provided as reward template. Template should belong to reward type schema`
  ),
  InvalidRewardType: new BadRequestException(`${commonText} Invalid reward type provided`),
  LoyaltySchemaTemplateNotAllowed: new BadRequestException(`${commonText} Reward template should not belong to loyalty card schema.`),
  InvalidAllowedSchemaId: new BadRequestException(`${commonText} Allowed schema should belong to given collection.`),
  RedemptionUtilityExpired: new BadRequestException(`${commonText} Redemption utility has expired.`),
  InvalidRedemptionUsage: new BadRequestException(`${commonText} Invalid usage count for redemption utility.`),
  RedemptionUtilityTemplateAlreadyExists: new BadRequestException(`${commonText} A redemption utility with this template already exists.`),
  AttributeNotFoundInTemplate: new BadRequestException(`${commonText} Allowed templates is less than sum of attributes required`),
  SubmissionMoreThanAllowed: new BadRequestException(`${commonText} Allowed submission cannot be more than allowed templates`),
  AllowedSubmissionMismatch: new BadRequestException(`${commonText} Allowed submission should be equal to total attribute submission`),
  RewardCardNotAllowed: new BadRequestException(`${commonText} Reward card for partial trivia challenge is not allowed.`),
  NoTiersFound: new BadRequestException(`${commonText} No tiers found`),
  NotEnoughRewardPoints: new BadRequestException(`${commonText} Redeeming reward points are not sufficient for this card.`),
  InvalidEligibility: new BadRequestException(`${commonText} Invalid eligibility provided.`),
  NotAllowedOperation: new BadRequestException(`${commonText} This operation is not allowed for external loyalty program.`),
  AllowedOnlyForLoyaltyExternal: new BadRequestException(`${commonText} This operation is only allowed for external loyalty program.`),
  RequiredFieldsNotPresent: new BadRequestException(`${commonText} Either cardId or userId should be present.`),
  InvalidExpiryField: new BadRequestException(`${commonText} Invalid expiry field provided. Please try again.`),
  InvalidTierForRevision: new BadRequestException(`${commonText} Invalid tier provided for card revision.`),
  InvalidSubmittedCards: new BadRequestException(`${commonText} Invalid submitted cards. Please try again.`),
  InvalidSlots: new BadRequestException(`${commonText} Slots array does not match the expected number of elements in a grid`),
  InvalidText: new BadRequestException(`${commonText} Row and column text lengths should match the specified total rows and columns.`),
  InvalidQuestions: new BadRequestException(
    `${commonText} The number of questions should be equal to the total number of cells in the grid (totalRows * totalColumns).`
  ),
  InvalidQuestionNumber: new BadRequestException(
    `${commonText} The number of questions in this row should be equal to the total number of columns.`
  ),
  MismatchLength: new BadRequestException(`${commonText} The number of submitted cards should match the number of available slots.`),
  InvalidTemplateCollection: new BadRequestException(`${commonText} Invalid template. Template should belong to collection.`),
  InvalidTemplateSchema: new BadRequestException(`${commonText} Invalid template. Template should belong to schema.`),
  InvalidSchemaTemplate: new BadRequestException(`${commonText} Schemas of loyalty type are not allowed.`),
  InvalidRewardWheel: new BadRequestException(`${commonText} Invalid wheel ID. Please try again.`),
  InvalidCollectionId: new BadRequestException(`${commonText} Invalid collection ID. Please try again.`),

  //HOCKEY SCORE
  GameNotFound: new BadRequestException(`${commonText} Game not found`),
  ChallengeNotFound: new BadRequestException(`${commonText} challenge not found`),
  WinnerDeclared: new BadRequestException(`${commonText} winner already declared`),
  CardDuplicate: new BadRequestException(`${commonText} Duplicate cards not allowed`),

  // Notification
  NotificationNotFound: new BadRequestException(`${commonText} Notification not found.`),

  // OnChain
  BlockchainRequired: new BadRequestException(`${commonText} Blockchain is required`),
  RequestAlreadyExists: new BadRequestException(`${commonText} Request already exists. Please wait for it.`),
  InvalidOnChainOwner: new BadRequestException(`${commonText} Invalid on-chain owner.`),
}
